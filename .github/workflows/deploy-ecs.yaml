name: Deploy to ECS

on:
  workflow_call:
    inputs:
      AWS_REGION:
        type: string
        description: 'AWS region'
        required: true
      RUN_ENV:
        type: string
        description: 'Run environment'
        required: true
      RESOURCE_NAME:
        type: string
        description: 'Resource name'
        required: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.RUN_ENV }}
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-region: ${{ inputs.AWS_REGION }}
        role-session-name: ${{ inputs.RESOURCE_NAME }}-deploy
        role-to-assume: ${{ secrets.AWS_ARN }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: true

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$RESOURCE_NAME:latest --build-arg RUN_ENV=${{ inputs.RUN_ENV }} .
        docker push $ECR_REGISTRY/$RESOURCE_NAME:latest
        echo "image=$ECR_REGISTRY/$RESOURCE_NAME:latest" >> $GITHUB_OUTPUT

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ inputs.RESOURCE_NAME }}-task \
          --query taskDefinition > task-definition.json
        echo $(cat task-definition.json | jq 'del(
            .taskDefinitionArn,
            .requiresAttributes,
            .compatibilities,
            .revision,
            .status,
            .registeredAt,
            .registeredBy
          )') > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ inputs.RESOURCE_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ inputs.RESOURCE_NAME }}-service
        cluster: ${{ inputs.RESOURCE_NAME }}-cluster
        wait-for-service-stability: true